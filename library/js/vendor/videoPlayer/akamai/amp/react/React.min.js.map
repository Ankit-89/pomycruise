{"version":3,"sources":["../../../../src/ClassList.js","../../../../src/Component.js","../../../../src/Container.js","../../../../src/Control.js","../../../../src/PanelControl.js","../../../../src/PlayPause.js","../../../../src/PauseOverlay.js","../../../../src/BufferingOverlay.js","../../../../src/Utils.js","../../../../src/CurrentTime.js","../../../../src/Live.js","../../../../src/Duration.js","../../../../src/Slider.js","../../../../src/Progress.js","../../../../src/Volume.js","../../../../src/Toggle.js","../../../../src/Mute.js","../../../../src/Fullscreen.js","../../../../src/SettingsButton.js","../../../../src/ListItem.js","../../../../src/Panel.js","../../../../src/PanelMenu.js","../../../../src/captionsettings/Home.js","../../../../src/captionsettings/Options.js","../../../../src/captionsettings/OptionsPanel.js","../../../../src/captionsettings/Color.js","../../../../src/captionsettings/BackgroundColor.js","../../../../src/captionsettings/BackgroundOpacity.js","../../../../src/captionsettings/CharacterEdgeStyle.js","../../../../src/captionsettings/FontColor.js","../../../../src/captionsettings/FontFamily.js","../../../../src/captionsettings/FontOpacity.js","../../../../src/captionsettings/FontSize.js","../../../../src/captionsettings/WindowColor.js","../../../../src/captionsettings/WindowOpacity.js","../../../../src/captionsettings/ScrollType.js","../../../../src/captionsettings/EdgeColor.js","../../../../src/captionsettings/EdgeOpacity.js","../../../../src/CaptionSettings.js","../../../../src/Quality.js","../../../../src/PlaybackRate.js","../../../../src/SettingsPanel.js","../../../../src/ShareButton.js","../../../../src/SharePanel.js","../../../../src/CaptionToggleButton.js","../../../../src/JumpBack.js","../../../../src/JumpForward.js","../../../../src/Poster.js","../../../../src/Title.js","../../../../src/ErrorMsg.js","../../../../src/ContextMenu.js","../../../../src/Ads.js","../../../../src/Airplay.js","../../../../src/PiP.js","../../../../src/ChromeCast.js","../../../../src/UI.js","../../../../src/main.js"],"names":["ClassList","this","prepend","token","contains","tokens","unshift","i","splice","indexOf","remove","add","className","setState","toString","player","l10n","_this","handlers","forEach","_this2","handler","bind","props","nextState","key","state","nextProps","_key","playerEventMap","event","_this3","extends","ref","propsList","classList","events","amp","values","type","Events","_props","data","babelHelpers","objectWithoutProperties","object","PropTypes","React","Component","component","akamai","Utils","createUID","components","item","parent","dom","mouseFocus","altText","focused","onKeyPress","keyCode","onAction","value","onChange","title","tabIndex","onMouseDown","onMouseUp","onFocus","onBlur","onKeyDown","onClick","aria","PanelControl","__proto__","Object","getPrototypeOf","call","context","panel","Control","playState","play","parseInt","formatZeroFill","time","strTime","length","str","number","precision","root","left","element","offsetWidth","top","offsetHeight","width","height","scrollTop","document","documentElement","scrollLeft","tagName","offsetTop","clientTop","clientLeft","window","pageXOffset","targetTouches","pageX","scrollX","pageY","scrollY","pageYOffset","plugin","enabled","config","disabled","liveClickHandler","percent","min","dragging","max","round","getLocalizedString","format","valueText","offset","getElementOffset","code","increment","stopPropagation","preventDefault","onHandleMouseUp","onHandleMouseMove","addEventListener","removeEventListener","onMouseMove","style","onHandleMouseDown","onTouchStart","change","update","assign","Math","textVisible","isTouch","bindHandlers","ads","ondurationchange","currentTime","markers","clear","cues","duration","cue","index","startTime","pos","getEventPos","clamp","states","refs","text","clientWidth","textPercent","minClampValue","textValue","Slider","volume","get","isVolumeSettable","Volume","prototype","toggled","level","Mute","Toggle","enterFullScreen","direction","parentNode","settingsPanel","close","tabable","getElementsByClassName","role","open","items","clickHandler","isOptionSelected","createElement","ListItem","_open","onopen","onclose","_babelHelpers$get","Panel","Home","listOptions","language","captioning","tracks","track","getLanguageString","lang","OptionsList","map","selected","viewChange","label","OptionsPanel","captionsettings","options","len","setting","activeIndex","Color","r","parts","parseFloat","g","keyDown","settings","captions","test","a","hidden","selectTrackByLanguage","replace","color","prevProps","gotoSettings","qualityLevels","onqualitylevelsloaded","detail","bitrate","push","autoLevel","qualityMode","findIndex","levelObject","qualityIndex","quality","playbackRate","PlaybackRate","settingsLevel","brLabel","firstElem","focus","childNodes","isCaptionEnabled","componentEnabled","isQualityEnabled","qualityRef","playbackRef","changeState","PanelMenu","id","url","CaptionToggleButton","ContextMenu","menuItems","akamaiGetViewerId","x","onadbreakstart","onadbreakend","onadstarted","amp-ad-break","container","formatTimecode","ceil","msg","available","video","isAvailable","mediaElement","setAttribute","availability","webkitCurrentPlaybackTargetIsWireless","playing","Airplay","amp-playback-target-airplay","PiP","webkitSupportsPresentationMode","webkitSetPresentationMode","chromecast","isReceiverAvailable","ChromeCast","feature","contextMenuClick","isTouchDevice","autoHide","timeout","media","startActiveTimeout","amp-waiting","stopActiveTimeout","setTimeout","_this5","onMouseLeave","isMouseOverElement","activeState","target","nodeName","isFocused","muted","displayState","exitFullScreen","togglePlayPause","progress","body","contextMenu","removeContextMenu","appendChild","display","onContextMenu","Ads","PauseOverlay","BufferingOverlay","Progress","PlayPause","JumpBack","JumpForward","Duration","SettingsButton","Fullscreen","SettingsPanel","ErrorMsg","mode","defineProperty","active","amp-active","amp-inactive","inactive","native","controls","ui","Promise","setPlayerProperty","UI","AMP"],"mappings":"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","file":"akamai/amp/react/React.min.js","sourcesContent":["export default class ClassList {\n\n  constructor(component, tokens = []) {\n    this.component = component\n    this.tokens = tokens\n  }\n\n  add(token, prepend = false) {\n    if (this.contains(token))\n      return\n\n    if (prepend === true) {\n      this.tokens.unshift(token)\n    } else {\n      this.tokens.push(token)\n    }\n  }\n\n  contains(token) {\n    return this.tokens.indexOf(token) !== -1\n  }\n\n  item(index) {\n    return this.tokens[index] || null\n  }\n\n  remove(token) {\n    const i = this.tokens.indexOf(token)\n     if (i === -1)\n       return\n    this.tokens.splice(i, 1)\n  }\n\n  toggle(token) {\n    if (this.contains(token)) {\n      this.remove(token)\n    } else {\n      this.add(token)\n    }\n  }\n\n  update(tokenMap) {\n    for (let token in tokenMap) {\n      if (tokenMap[token]) {\n        this.add(token)\n      } else {\n        this.remove(token)\n      }\n    }\n\n    let className = this.toString()\n    if (className != this.component.state.className) {\n      this.component.setState({className})\n    }\n  }\n\n  toString() {\n    return this.tokens.join(' ')\n  }\n}\n","import ClassList from \"./ClassList.js\"\n\nexport default class Component extends React.Component {\n\n  constructor (props, context) {\n    super(props, context)\n    this.state = {\n      l10n: this.player.l10n\n    }\n    this.classList = new ClassList(this, this.props.classList)\n  }\n\n  static get contextTypes() {\n    return {\n      player: PropTypes.object,\n      config: PropTypes.object,\n      plugin: PropTypes.object\n    }\n  }\n\n  get player() {\n    return this.props.player || this.context.player\n  }\n\n  get config() {\n    return this.props.config || this.context.config\n  }\n\n  get l10n() {\n    return this.state.l10n\n  }\n\n  get plugin() {\n    return this.context.plugin\n  }\n\n  get className() {\n    let className = this.props.className || \"\"\n    className += ` ${this.classList}`\n\n    return className.trim()\n  }\n\n  get textContent() {\n    return this.props.textContent || this.state.textContent\n  }\n\n  get children() {\n    return this.props.children || []\n  }\n\n  get element() {\n    return this.refs.element\n  }\n\n  get dom() {\n    return this.element || ReactDOM.findNode(this)\n  }\n\n  get data() {\n    return this.props.data || {}\n  }\n\n  get playerEventMap() {\n    const events = []\n\n    if (this.player == null)\n      return events\n\n    akamai.amp.Events.values.forEach((type) => {\n      let key = `on${type}`\n      if (typeof this[key] != \"function\")\n        return\n      events.push({key: key, type: type})\n    })\n\n    return events\n  }\n\n  get propsList() {\n    const { className, classList, data, textContent, ...props } = this.props\n    return props\n  }\n\n  getLocalizedString(key) {\n    return this.player.getLocalizedString(key)\n  }\n\n  onlanguagechange() {\n    this.setState({l10n: this.player.l10n})\n  }\n\n  bindHandlers(handlers) {\n    if (handlers == null || handlers.length <= 0)\n      return\n\n    handlers.forEach((handler) => {\n      if (typeof this[handler] != \"function\")\n        return\n      this[handler] = this[handler].bind(this)\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let state = this.state\n    let props = this.props\n\n    if (nextState != null) {\n      for (let key in nextState) {\n        if (nextState[key] != state[key]) {\n          return true\n        }\n      }\n    }\n\n    // TODO: Is this needed?\n    if (nextProps != null) {\n      for (let key in nextProps) {\n        if (nextProps[key] != props[key]) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  componentWillMount() {\n    this.playerEventMap.forEach((event) => {\n      this[event.key] = this[event.key].bind(this)\n      this.player.addEventListener(event.type, this[event.key])\n    })\n  }\n\n  componentWillUnmount() {\n    this.playerEventMap.forEach((event) => {\n      this.player.removeEventListener(event.type, this[event.key])\n    })\n  }\n\n  render() {\n    return (\n      <div ref=\"element\" {...this.propsList} className={this.className}>\n        {this.textContent}\n        {this.children}\n      </div>\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Container extends Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state.components = []\n  }\n\n  get components() {\n    return this.state.components\n  }\n\n  addComponent(component) {\n    let components = this.state.components.slice()\n    if (component.key == null)\n      component.key = akamai.amp.Utils.createUID()\n    components.push(component)\n    this.setState({components})\n  }\n\n  removeComponent(component) {\n    let components = this.state.components.filter((item) => item != component)\n    this.setState({components})\n  }\n\n  clear() {\n    this.setState({components: []})\n  }\n\n  appendChild(element) {\n    let parent = this.dom\n    if (parent == null)\n      return\n    parent.appendChild(element)\n  }\n\n  removeChild(element) {\n    let parent = this.dom\n    if (parent == null)\n      return\n    parent.removeChild(element)\n  }\n\n  get children() {\n    return super.children.concat(this.state.components)\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Control extends Component {\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-icon\")\n    this.classList.add(\"amp-control\")\n    this.mouseFocus = false\n    this.focused = false\n    this.state.altText = this.altText\n\n    this.bindHandlers([\"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onClick\", \"onChange\"])\n  }\n\n  get aria() {\n    return {\n      \"aria-label\": this.title,\n      role: \"button\"\n    }\n  }\n\n  get propsList() {\n    const { altText, ...props } = super.propsList\n    props.className = this.className\n    props.tabIndex = \"0\"\n    props.onMouseDown = (event) => (this.props.onMouseDown || this.onMouseDown)(event)\n    props.onMouseUp = (event) => (this.props.onMouseUp || this.onMouseUp)(event)\n    props.onFocus = (event) => (this.props.onFocus || this.onFocus)(event)\n    props.onBlur = (event) => (this.props.onBlur || this.onBlur)(event)\n    props.onKeyDown = (event) => (this.props.onKeyDown || this.onKeyDown)(event)\n    props.onClick = (event) => (this.props.onClick || this.onClick)(event)\n\n    const aria = this.aria\n    for (let key in aria) {\n      props[key] = aria[key]\n    }\n\n    return props\n  }\n\n  get altText() {\n    return this.props.altText || this.state.altText\n  }\n\n  get title() {\n    return this.player.getLocalizedString(this.altText)\n  }\n\n  onMouseDown(event) {\n    this.mouseFocus = true\n  }\n\n  onMouseUp(event) {\n    this.mouseFocus = false\n  }\n\n  onFocus(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.focused = true\n    this.classList.update({\"amp-focus\": true})\n  }\n\n  onBlur(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.focused = false\n    this.classList.update({\"amp-focus\": false})\n  }\n\n  onKeyDown(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.onKeyPress(event)\n\n    if (event.type == \"keypress\" && (event.keyCode == 13 || event.keyCode == 32))\n      this.onAction()\n  }\n\n  onAction() {\n    this.onClick()\n  }\n\n  onKeyPress(event) {\n\n  }\n\n  onClick(event) {\n\n  }\n\n  change(value) {\n    const onChange = this.propsList.onChange || this.onChange\n    if (typeof onChange != \"function\")\n      return\n    onChange(value)\n  }\n\n  render() {\n    return (\n      <button ref=\"element\" {...this.propsList} className={this.className}>\n        {this.textContent}\n        {this.children}\n      </button>\n    )\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PanelControl extends Control {\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  get propsList() {\n    const { panel, ...props } = super.propsList\n    return props\n  }\n\n  get panel() {\n    return this.plugin.refs[this.props.panel]\n  }\n\n  onClick() {\n    this.panel.toggle()\n  }\n\n  onKeyDown(event) {\n    this.panel.onKeyDown(event)\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PlayPause extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-playpause\", true)\n    this.state.altText = \"MSG_PLAY\"\n  }\n\n  onplaying() {\n    this.setState({altText: \"MSG_PAUSE\"})\n  }\n\n  onpause() {\n    this.setState({altText: \"MSG_PLAY\"})\n  }\n\n  onended() {\n    this.setState({altText: \"MSG_REPLAY\"})\n  }\n\n  onClick() {\n    const player = this.player\n    switch (player.playState) {\n      case \"ended\":\n        this.plugin.replay()\n      break\n\n      case \"ready\":\n      case \"paused\":\n        player.play()\n      break\n\n      default:\n        player.pause()\n      break\n    }\n  }\n\n}\n","import Control from \"./Control.js\"\n\nexport default class PauseOverlay extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-pause-overlay\", true)\n    this.state.altText = \"MSG_PLAY\"\n  }\n\n  onClick() {\n    const player = this.player\n    switch (player.playState) {\n      case \"ended\":\n        this.plugin.replay()\n      break\n\n      default:\n        player.play()\n      break\n    }\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class BufferingOverlay extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-buffering-overlay\", true)\n    this.classList.add(\"amp-icon\")\n  }\n}\n","export default class Utils {\n\n  /**\n   * Takes a time in seconds and converts it to timecode.\n   *\n   * @param   {Number}  time  The time in seconds to be formatted.\n   * @return  {String}  A SMTP formatted string.\n   */\n  static formatTimecode(time, duration) {\n    time = parseInt(time)\n    if (isNaN(time)) {\n      return \"00:00\"\n    }\n    var strTime = Utils.formatZeroFill(time % 60)\n    time = parseInt(time / 60)\n    strTime = Utils.formatZeroFill(time % 60) + \":\" + strTime\n    time = parseInt(time / 60)\n    if (time > 0) {\n      strTime = Utils.formatZeroFill(time) + \":\" + strTime\n    }\n    if (duration >= 3600 && strTime.length === 5) {\n      strTime = \"00:\" + strTime\n    }\n    return strTime\n  }\n\n\n  /**\n   * Converts a time in seconds to a string and adds a zero in front of any number lower than 10.\n   *\n   * @param {Number} time The number to be zero filled.\n   */\n  static formatZeroFill(time) {\n    var str = time.toString()\n    if (time < 10) {\n      str = \"0\" + str\n    }\n    return str\n  }\n\n  /**\n   * @param {Number} number\n   *    The number to be rounded.\n   *\n   * @param {Number} precision\n   *    The level of precision. Positive 1 would round to 1 decimal place and -1 would round to the tens.\n   *\n   * @return {Number}\n   *    The rounded number.\n   */\n  static round(number, precision) {\n    const factor = Math.pow(10, precision)\n    return Math.round(number * factor) / factor\n  }\n\n  static getElementOffset(element, root = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullscreenElement) {\n    let left = 0\n    let top = 0\n    let width = element.offsetWidth\n    let height = element.offsetHeight\n    let scrollLeft = 0\n    let scrollTop = 0\n\n    while (element && element !== root) {\n      if (element.tagName === \"BODY\") {\n        scrollLeft = element.scrollLeft || document.documentElement.scrollLeft\n        scrollTop = element.scrollTop || document.documentElement.scrollTop\n        left += element.offsetLeft - scrollLeft + element.clientLeft\n        top += element.offsetTop - scrollTop + element.clientTop\n      } else {\n        left += element.offsetLeft - element.scrollLeft + element.clientLeft\n        top += element.offsetTop - element.scrollTop + element.clientTop\n      }\n      element = element.offsetParent\n    }\n\n    return {left, top, width, height}\n  }\n\n  static getEventPos(event) {\n    return {\n        x: (event.pageX - (window.scrollX || window.pageXOffset)) || (event.targetTouches[0].pageX - window.scrollX),\n        y: (event.pageY - (window.scrollY || window.pageYOffset)) || (event.targetTouches[0].pageY - window.scrollY)\n    }\n  }\n\n  static componentEnabled(plugin, component) {\n    const config = plugin.config[component]\n    return ((plugin.player[component] != null && plugin.player[component].enabled !== false) || (config != null && config !== false && config.enabled !== false && config.disabled !== true))\n  }\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class CurrentTime extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.currentTime = this.player.currentTime\n    this.state.duration = this.player.duration\n  }\n\n  onmediachange(event) {\n    this.setState({currentTime: 0})\n  }\n\n  ontimeupdate(event) {\n    this.setState({currentTime: Math.round(event.detail)})\n  }\n\n  onseeking() {\n    this.setState({currentTime: Math.round(this.player.currentTime)})\n  }\n\n  ondurationchange(event) {\n    this.setState({duration: Math.round(event.detail)})\n  }\n\n  render() {\n    return <span className=\"amp-current-time\">{Utils.formatTimecode(this.state.currentTime, this.state.duration)}</span>\n  }\n\n}\n","import Component from \"./Component.js\"\n\nexport default class Live extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.isLive = true\n  }\n\n  onislive(event) {\n    this.setState({isLive: event.detail})\n  }\n\n  liveClickHandler() {\n    if (!this.state.isLive)\n      this.player.goLive()\n  }\n\n  render() {\n    return <span ref=\"element\" className=\"amp-live-label\" onClick={this.liveClickHandler.bind(this)}>{this.getLocalizedString(this.state.isLive ? \"MSG_LIVE\" : \"MSG_GO_LIVE\")}</span>\n  }\n\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Duration extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.duration = this.player.duration\n  }\n\n  onmediachange(event) {\n    this.setState({duration: Math.round(this.player.duration)})\n  }\n\n  ondurationchange(event) {\n    this.setState({duration: Math.round(event.detail)})\n  }\n\n  render() {\n    return <span className=\"amp-duration\">{Utils.formatTimecode(this.state.duration, this.state.duration)}</span>\n  }\n\n}\n","import Control from \"./Control.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Slider extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.percent = 0\n    this.state.value = 0\n    this.state.min = 0\n    this.state.max = 1\n    this.state.dragging = false\n    this.increment = 0.1\n    this.classList.add(\"amp-slider\")\n\n    this.bindHandlers([\"onHandleMouseDown\", \"onHandleMouseUp\", \"onHandleMouseMove\"])\n  }\n\n  set percent(value) {\n    value = akamai.amp.Utils.clamp(value, 0, 1)\n\n    if (this.percent == value)\n      return\n\n    this.change(this.update({percent: value}))\n  }\n\n  get percent() {\n    return this.state.percent\n  }\n\n  set value(value) {\n    value = akamai.amp.Utils.clamp(value, this.min, this.max)\n\n    if (this.value == value)\n      return\n\n    this.change(this.update({value}))\n  }\n\n  format(value) {\n    return value\n  }\n\n  update(values) {\n    if (values.percent == null)\n      values.percent = values.value / this.max\n\n    if (values.value == null)\n      values.value = Math.round(values.percent * this.max)\n\n    if (values.valueText == null)\n      values.valueText = `${this.format(values.value)} ${this.getLocalizedString(\"MSG_OF\")} ${this.format(this.max)}`\n\n    this.setState(values)\n    return values\n  }\n\n  get value() {\n    return this.state.value\n  }\n\n  set min(value) {\n    if (this.min == value)\n      return\n\n    this.setState({min: value})\n  }\n\n  get min() {\n    return this.state.min\n  }\n\n  set max(value) {\n    if (this.max == value)\n      return\n\n    this.setState({max: value})\n  }\n\n  get max() {\n    return this.state.max\n  }\n\n  set dragging(value) {\n    if (this.dragging == value)\n      return\n\n    this.setState({dragging: value})\n    this.classList.update({\"amp-dragging\": value})\n    this.plugin.dragging = value\n  }\n\n  get dragging() {\n    return this.state.dragging\n  }\n\n  get markers() {\n    return this.refs.markers\n  }\n\n  get aria() {\n    return Object.assign(super.aria, {\n      role: \"slider\",\n      \"aria-valuemin\": this.state.min,\n      \"aria-valuemax\": Math.round(this.state.max),\n      \"aria-valuenow\": Math.round(this.state.value),\n      \"aria-valuetext\": this.state.valueText\n    })\n  }\n\n  move(event) {\n    const offset = Utils.getElementOffset(this.refs.element)\n    const pos = Utils.getEventPos(event)\n    this.percent = (pos.x - offset.left) / offset.width\n  }\n\n  onClick(event) {\n    this.move(event)\n  }\n\n  onAction() {\n\n  }\n\n  onKeyPress(event) {\n    const code = event.keyCode\n    // left arrow\t37\n    // up arrow\t38\n    // right arrow\t39\n    // down arrow\t40\n    if (code == 39 || code == 38) {\n      this.percent += this.increment\n    } else if (code == 37 || code == 40) {\n      this.percent -= this.increment\n    }\n  }\n\n  onHandleMouseDown(event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.dragging = true\n    window.addEventListener(\"mouseup\", this.onHandleMouseUp)\n    window.addEventListener(\"mousemove\", this.onHandleMouseMove)\n    window.addEventListener(\"touchend\", this.onHandleMouseUp)\n    window.addEventListener(\"touchmove\", this.onHandleMouseMove)\n  }\n\n  onHandleMouseMove(event) {\n    this.move(event)\n  }\n\n  onHandleMouseUp(event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.dragging = false\n    window.removeEventListener(\"mouseup\", this.onHandleMouseUp)\n    window.removeEventListener(\"mousemove\", this.onHandleMouseMove)\n    window.removeEventListener(\"touchend\", this.onHandleMouseUp)\n    window.removeEventListener(\"touchmove\", this.onHandleMouseMove)\n    this.change(this.update({value: this.value, percent: this.percent}))\n  }\n\n  render() {\n    const percent = `${Utils.round(this.percent * 100, 2)}%`\n    return (\n      <div ref=\"element\" {...this.propsList} onMouseMove={this.onMouseMove}>\n        <div ref=\"value\" className=\"amp-track\"></div>\n        <div ref=\"value\" className=\"amp-value\" style={{width: percent}}></div>\n        {this.children}\n        <div ref=\"handle\" className=\"amp-handle\" style={{left: percent}} onMouseDown={this.onHandleMouseDown} onTouchStart={this.onHandleMouseDown}></div>\n      </div>\n    )\n  }\n\n}\n","import Container from \"./Container.js\"\nimport Slider from \"./Slider.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Progress extends Slider {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-progress\", true)\n    this.state.altText = \"MSG_SEEK\"\n    this.state.textVisible = \"visible\"\n    this.bindHandlers([\"onMouseMove\", \"onaddurationchange\", \"onadtimeupdate\", \"onaddurationchange\"])\n    this.isTouch = akamai.amp.Utils.isTouch\n  }\n\n  get propsList() {\n    const props = super.propsList\n    props.onMouseMove = this.onMouseMove\n    return props\n  }\n\n  get markers() {\n    return this.refs.markers\n  }\n\n  format(value) {\n    return Utils.formatTimecode(value, this.max)\n  }\n\n  onready() {\n    const ads = this.player.ads\n    if (ads == null)\n      return\n\n    ads.addEventListener(\"breakend\", this.ondurationchange)\n    ads.addEventListener(\"timeupdate\", this.onadtimeupdate)\n    ads.addEventListener(\"durationchange\", this.onaddurationchange)\n  }\n\n  onmediachange() {\n    this.update({value: 0})\n  }\n\n  ontimeupdate() {\n    if (this.dragging)\n      return\n    this.update({value: this.player.currentTime})\n  }\n\n  onseeking() {\n    this.update({value: this.player.currentTime})\n  }\n\n  oncueschange(event) {\n    const cues = event.detail\n    const markers = this.markers\n\n    markers.clear()\n\n    if (cues == null || cues.length <= 0)\n      return\n\n    const duration = this.player.duration\n    cues.forEach((cue, index) => {\n      if (cue.startTime <= 0)\n        return\n      markers.addComponent(<div className=\"amp-marker\" style={{left: `${cue.startTime / duration * 100}%`}} key={index} />)\n    })\n  }\n\n  ondurationchange(event) {\n    this.increment = 10 / this.player.duration\n    this.max = this.player.duration\n    this.update({value: this.player.currentTime})\n  }\n\n  onadtimeupdate(event) {\n    this.update({value: event.detail})\n  }\n\n  onaddurationchange(event) {\n    this.max = event.detail.duration\n  }\n\n  onMouseMove(event) {\n    const offset = Utils.getElementOffset(this.refs.element)\n    const pos = Utils.getEventPos(event)\n    const percent = (pos.x - offset.left) / offset.width\n    this.setState({textPercent: akamai.amp.Utils.clamp(Utils.round(percent, 4), 0, 1)})\n  }\n\n  onHandleMouseDown(event) {\n    super.onHandleMouseDown(event)\n    if (this.isTouch)\n      this.setState({textVisible: \"visible\"})\n  }\n\n  onHandleMouseMove(event) {\n    super.onHandleMouseMove(event)\n    this.onMouseMove(event)\n  }\n\n  onHandleMouseUp(event) {\n    super.onHandleMouseUp(event)\n    if (this.isTouch)\n      this.setState({textVisible: \"hidden\"})\n  }\n\n  onChange(states) {\n    if (this.dragging)\n      return\n    this.player.currentTime = states.value\n  }\n\n  get children() {\n    const textPercent = `${this.state.textPercent * 100}%`\n    const minClampValue = this.refs.element ? ((this.refs.text.clientWidth/1.3)*100/this.refs.element.clientWidth) : 0\n    const maxClampValue = 100 - minClampValue\n    const textValue = `${akamai.amp.Utils.clamp(Utils.round(this.state.textPercent * 100, 2), minClampValue, maxClampValue)}%`\n\n    return (\n      <div>\n        <Container ref=\"markers\" className=\"amp-markers\"></Container>\n        <div ref=\"text\" className=\"amp-text\" style={{left: textValue, visibility: this.state.textVisible}}>{this.format(this.state.textPercent * this.player.duration)}</div>\n      </div>\n    )\n  }\n}\n","import Slider from \"./Slider.js\"\n\nexport default class Volume extends Slider {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-volume\", true)\n    this.state.min = 0\n    this.state.max = 100\n    this.state.percent = this.player.volume\n    this.state.value = this.player.volume * 100\n    this.state.altText = \"MSG_VOLUME\"\n  }\n\n  format(value) {\n    return Math.round(value)\n  }\n\n  onvolumechange(event) {\n    this.update({percent: event.detail})\n  }\n\n  onChange(value) {\n    this.player.volume = value.percent\n  }\n\n  render() {\n    if (akamai.amp.Utils.isVolumeSettable() == false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Toggle extends Control {\n  \n  constructor(props, context) {\n    super(props, context)\n    this.state.toggled = false\n    this.state.onlabel = \"\"\n    this.state.offlabel = \"\"\n  }\n  \n  set toggled(value) {\n    if (value === this.state.toggled)\n      return value\n      \n    this.setState({toggled: value})\n    this.change(value)\n  }\n  \n  get toggled() {\n    return this.state.toggled\n  }\n  \n  get propsList() {\n    const props = super.propsList\n    props[\"aria-checked\"] = this.state.toggled\n    props[\"role\"] = \"switch\"\n    return props\n  }\n  \n  toggle() {\n    return this.toggled = !this.toggled\n  }\n  \n  onClick(event) {\n    this.toggle()\n  }\n} \n","import Toggle from \"./Toggle.js\"\n\nexport default class Mute extends Toggle {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.level = \"\"\n    this.classList.add(\"amp-mute\", true)\n    this.state.altText = \"MSG_MUTE\"\n  }\n\n  get className() {\n    return `${super.className} ${this.state.level}`\n  }\n\n  onChange() {\n    const player = this.player\n    player.muted = !player.muted\n  }\n\n  onvolumechange() {\n    const volume = this.player.volume\n    let level = \"\"\n\n    if (volume == 0) {\n      level = \"amp-muted\"\n    } else if (volume < 0.5) {\n      level = \"amp-low\"\n    }\n\n    this.setState({level})\n  }\n\n  render() {\n    if (akamai.amp.Utils.isVolumeSettable() == false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Fullscreen extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-fullscreen\", true)\n  }\n\n  onfullscreenchange(event) {\n    const key = (event.detail) ? \"MSG_EXIT_FULLSCREEN\" : \"MSG_ENTER_FULLSCREEN\"\n    this.setState({altText: key})\n  }\n\n  onClick() {\n    if (this.player.displayState == \"normal\") {\n      this.player.enterFullScreen()\n    } else {\n      this.player.exitFullScreen()\n    }\n  }\n}\n","import PanelControl from \"./PanelControl.js\"\n\nexport default class SettingsButton extends PanelControl {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-settings\", true)\n    this.state.altText = \"MSG_SETTINGS\"\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class ListItem extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-list-item\")\n    this.classList.remove(\"amp-icon\")\n    this.classList.remove(\"amp-control\")\n    this.state.direction = this.props.direction || \"none\"\n  }\n\n  focus() {\n    this.refs.element.focus()\n  }\n\n  onKeyDown(event) {\n    if (this.mouseFocus == true)\n      return\n    this.onKeyPress(event)\n    if (event.type == \"keydown\") {\n      //13, 32 space Enter\n      //37, 39 left and right arrow\n      //38, 40 up down\n      switch (event.keyCode) {\n        case 13:\n        case 32:\n          this.props.onClick(event) || this.onClick(event)\n          break\n        case 37:\n          if (this.state.direction === \"left\")\n            this.props.onClick(event) || this.onClick(event)\n          break\n        case 39:\n        if (this.state.direction === \"right\")\n          this.props.onClick(event) || this.onClick(event)\n          break\n        case 38:\n          this.element.previousElementSibling !== null && this.element.previousElementSibling.focus()\n          break\n        case 40:\n          this.element.nextElementSibling !== null && this.element.nextElementSibling.focus()\n          break\n      }\n\n      if ( ((event.keyCode == 9 || event.keyCode == 40) && (event.shiftKey == false) && this.element.nextElementSibling === null) ||\n           ((event.keyCode == 9 || event.keyCode == 38) && (event.shiftKey == true) && this.element.previousElementSibling === null) ||\n             event.keyCode == 27 ) {\n        let tabIndex\n        if(this.refs.element.parentNode.className.indexOf(\"share\") >=0 ) {\n          tabIndex = 4\n          this.plugin.refs.sharePanel.close()\n        }\n        else {\n          tabIndex = 2\n          this.plugin.refs.settingsPanel.close()\n        }\n        let tabable = document.getElementsByClassName(\"amp-control\")\n        setTimeout(() => { tabable[tabable.length - tabIndex].focus() }, 1);\n      }\n\n    }\n\n    event.stopPropagation()\n  }\n\n\n  render() {\n    return (\n      <div ref=\"element\" {...this.propsList} role=\"menuitem\">\n        {this.children}\n      </div>\n    )\n  }\n\n}\n","import Component from \"./Component.js\"\nimport ListItem from \"./ListItem.js\"\n\nexport default class Panel extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.closeHandler = this.closeHandler.bind(this)\n  }\n\n  set open(value) {\n    if (value == this._open)\n      return\n\n    this._open = value\n    this.classList.update({\"amp-open\": this._open})\n    this.plugin.open = value\n\n    if (this._open) {\n      document.addEventListener(\"click\", this.closeHandler)\n      if (this.props.onopen)\n        this.props.onopen(this)\n    } else {\n      if (this.props.onclose)\n        this.props.onclose(this)\n    }\n  }\n\n  get open() {\n    return this._open\n  }\n\n  get propsList() {\n    const { onclose, onopen, ...props } = super.propsList\n    return props\n  }\n\n  get title() {\n    return \"TITLE\"\n  }\n\n  closeHandler(event) {\n    if (this.element === undefined || this.element.contains(event.target))\n      return\n\n    this.open = false\n    document.removeEventListener(\"click\", this.closeHandler)\n  }\n\n  toggle() {\n    this.open = !this.open\n  }\n\n  close() {\n    this.open = false\n  }\n\n  isOptionSelected(item, index) {\n    return (index === this.state.activeIndex)\n  }\n\n  clickHandler(object, index) {\n    this.setState({activeIndex: index})\n  }\n\n  backHandler(event) {\n    this.props.gotoSettings(event)\n  }\n\n  render() {\n    const items = this.listOptions.map((object, index) => {\n      return <ListItem key={index} onClick={this.clickHandler.bind(this, object, index)}>\n              <button tabIndex=\"-1\" className={this.isOptionSelected(object, index) ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </ListItem>\n    })\n\n    return <div ref=\"element\">\n            <ListItem className=\"amp-list-title\" onClick={this.backHandler.bind(this)} direction=\"left\">\n              <button tabIndex=\"-1\" className=\"amp-icon amp-icon-left\"></button>\n              <span>{this.state.title}</span>\n            </ListItem>\n            {items}\n           </div>\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class PanelMenu extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.keyDown = false\n  }\n\n  onKeyDown(event) {\n    if (event.keyCode == 13 || event.keyCode == 32) {\n      this.state.keyDown = true\n      this.toggle()\n    }\n  }\n}\n","import Panel from \"../Panel.js\"\nimport ListItem from \"../ListItem.js\"\n\nexport default class Home extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  clickHandler(object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({language: this.listOptions[index]})\n  }\n\n  render() {\n    this.listOptions = [{label:\"Off\", value: \"off\"}]\n    this.player.captioning.tracks.forEach((track) => {\n      const lang = track.language\n      this.listOptions.push({label: this.player.localization.getLanguageString(lang), value: lang})\n    })\n\n    const OptionsList = this.listOptions.map((object, index) => {\n      let selected = (!this.player.captioning.hidden && this.player.captioning.track && object.value == this.player.captioning.track.language)\n      if (this.player.captioning.hidden && index === 0) {\n        selected = true\n      }\n      return <ListItem key={index} onClick={this.clickHandler.bind(this, object, index)} >\n              <button className={selected ? 'amp-icon amp-list-item-selected':'amp-icon'} tabIndex=\"-1\"></button>\n              <span>{object.label}</span>\n             </ListItem>\n    })\n\n    return (\n      <div ref=\"element\" className=\"amp-captioning-home\">\n          <ListItem className=\"amp-list-highlight\" onClick={this.props.gotoSettings.bind(this)} direction=\"left\">\n            <button className=\"amp-icon amp-icon-left\" tabIndex=\"-1\"></button>\n            <span>Subtitles/CC</span>\n          </ListItem>\n          <ListItem onClick={(event)=>this.props.viewChange(event, \"options\")}  className=\"amp-option-button\" >Options</ListItem>\n        {OptionsList}\n      </div>\n    )\n  }\n}\n","import Panel from \"../Panel.js\"\nimport ListItem from \"../ListItem.js\"\n\nexport default class Options extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label: \"Font Family\", key: \"fontFamily\", value: \"Arial\"},\n      {label: \"Font Color\", key: \"fontColor\", value: \"Red\"},\n      {label: \"Font Size\", key: \"size\", value: \"100%\"},\n      {label: \"Font Opacity\", key: \"fontOpacity\", value: \"0%\"},\n      {label: \"Background Color\", key: \"backgroundColor\", value: \"Black\"},\n      {label: \"Background Opacity\", key: \"backgroundOpacity\", value: \"0%\"},\n      {label: \"Window Color\", key: \"windowColor\", value: \"Red\"},\n      {label: \"Window Opacity\", key: \"windowOpacity\", value: \"0%\"},\n      {label: \"Character Edge Style\", key: \"edgeType\", value: \"None\"},\n      {label: \"Edge Color\", key: \"edgeColor\", value: \"Red\"},\n      {label: \"Edge Opacity\", key: \"edgeOpacity\", value: \"Red\"},\n      {label: \"Scroll\", key: \"scroll\", value: \"Pop-out\"},\n    ]\n  }\n\n  render() {\n    const OptionsList = this.listOptions.map((object, index) => {\n      return <ListItem key={object.key} onClick={(event)=>this.props.viewChange(event, object.key)} direction=\"right\">\n                <span className=\"amp-label\">{object.label}</span>\n                <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                <span className=\"amp-right\">\n                  {this.props.captionsettings[object.key+\"Label\"]}\n                </span>\n             </ListItem>\n    })\n\n    return <div className=\"amp-captioning-options\">\n            <ListItem className=\"amp-list-title\" onClick={(event)=>this.props.viewChange(event, \"home\")} direction=\"left\">\n              <button className=\"amp-icon amp-icon-left\" tabIndex=\"-1\"></button>\n              <span>Options</span>\n            </ListItem>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class OptionsPanel extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  select() {\n    const options = this.listOptions\n    const props = this.props.captionsettings\n    const len = options.length\n    for (let i = 0; i < len; i++) {\n      if (options[i].value == props[this.setting]) {\n        this.state.activeIndex = i\n        break\n      }\n    }\n  }\n\n  clickHandler (object, index) {\n    super.clickHandler(object, index)\n    this.props.settingsChange({[this.setting]: object})\n  }\n\n  backHandler(event) {\n    this.props.viewChange(event, \"options\")\n  }\n}\n","export default class Color {\n\n  constructor(r, g, b, a = 1) {\n    if (typeof r == \"string\") {\n      const parts = r.match(/[0-9\\.]+/g)\n      r = parseInt(parts[0])\n      g = parseInt(parts[1])\n      b = parseInt(parts[2])\n      a = parts[3] != null ? parseFloat(parts[3]) : 1\n    }\n\n    this.r = r\n    this.g = g\n    this.b = b\n    this.a = a\n  }\n\n  toString(radix) {\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`\n  }\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class BackgroundColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label: \"White\", value: new Color(255,255,255)},\n      {label: \"Yellow\", value: new Color(255,255,0)},\n      {label: \"Green\", value: new Color(0,128,0)},\n      {label: \"Cyan\", value: new Color(0,255,255)},\n      {label: \"Blue\", value: new Color(0,0,255)},\n      {label: \"Magenta\", value: new Color(255,0,255)},\n      {label: \"Red\", value: new Color(255,0,0)},\n      {label: \"Black\", value: new Color(0,0,0)}\n    ]\n\n    this.state.title = \"Background Color\" // TODO: This needs to be localized\n    this.setting = \"backgroundColor\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class BackgroundOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"0%\", value: \"0\"},\n      {label:\"25%\", value: \".25\"},\n      {label:\"50%\", value: \".5\"},\n      {label:\"75%\", value: \".75\"},\n      {label:\"100%\", value: \"1\"}\n    ]\n\n    this.state.title = \"Background Opacity\" // TODO: This needs to be localized\n    this.setting = \"backgroundOpacity\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class CharacterEdgeStyle extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label: \"None\", value: \"text-shadow: 0px 0px 0px\"},\n      {label: \"Depressed\", value: \"text-shadow: 0px 1px 0px\"},\n      {label: \"Left Drop Shadow\", value: \"text-shadow: -3px 3px 2px\"},\n      {label: \"Raised\", value: \"text-shadow: 0px 1px 1px\"},\n      {label: \"Right Drop Shadow\", value: \"text-shadow: 3px 3px 2px\"},\n      {label: \"Uniform\", value: \"text-shadow: 0px 0px 4px\"}\n    ]\n    \n    this.state.title = \"Character Edge Style\" // TODO: This needs to be localized\n    this.setting = \"edgeType\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class FontColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"White\", value: new Color(255, 255, 255)},\n      {label:\"Yellow\", value: new Color(255, 255, 0)},\n      {label:\"Green\", value: new Color(0, 128, 0)},\n      {label:\"Cyan\", value: new Color(0, 255, 255)},\n      {label:\"Blue\", value: new Color(0, 0, 255)},\n      {label:\"Magenta\", value: new Color(255, 0, 255)},\n      {label:\"Red\", value: new Color(255, 0, 0)},\n      {label:\"Black\", value: new Color(0, 0, 0)}\n    ]\n\n    this.state.title = \"Font Color\" // TODO: This needs to be localized\n    this.setting = \"fontColor\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontFamily extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"Monospaced Serif\", value: \"'Courier New', Courier, 'Nimbus Mono L', 'Cutive Mono', monospace\"},\n      {label:\"Proportional Serif\", value: \"'Times New Roman', Times, Georgia, Cambria, 'PT Serif Caption', serif\"},\n      {label:\"Monospaced Sans-Serif\", value: \"'Deja Vu Sans Mono', 'Lucida Console', Monaco, Consolas, 'PT Mono', monospace\"},\n      {label:\"Proportional Sans-Serif\", value: \"Roboto, 'Arial Unicode Ms', Arial, Helvetica, Verdana, 'PT Sans Caption', sans-serif\"},\n      {label:\"Casual\", value: \"'Comic Sans MS', Impact, Handlee, fantasy\"},\n      {label:\"Cursive\", value: \"'Monotype Corsiva', 'URW Chancery L', 'Apple Chancery', 'Dancing Script', cursive\"},\n      {label:\"Small Capitals\", value: \"'Arial Unicode Ms', Arial, Helvetica, Verdana, 'Marcellus SC', sans-serif; font-variant: small-caps\"}\n    ]\n\n    this.state.title = \"Font Family\" // TODO: This needs to be localized\n    this.setting = \"fontFamily\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"25%\", value: \".25\"},\n      {label:\"50%\", value: \".5\"},\n      {label:\"75%\", value: \".75\"},\n      {label:\"100%\", value: \"1\"}\n    ]\n\n    this.state.title = \"Font Opacity\" // TODO: This needs to be localized\n    this.setting = \"fontOpacity\"\n    this.select()\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontSize extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"70%\", value: \"x-small\"},\n      {label:\"100%\", value: \"small\"},\n      {label:\"150%\", value: \"medium\"},\n      {label:\"200%\", value: \"large\"},\n      {label:\"300%\", value: \"x-large\"}\n    ]\n\n    this.state.title = \"Font Size\" // TODO: This needs to be localized\n    this.setting = \"size\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class WindowColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"White\", value: new Color(255, 255, 255)},\n      {label:\"Yellow\", value: new Color(255, 255, 0)},\n      {label:\"Green\", value: new Color(0, 128, 0)},\n      {label:\"Cyan\", value: new Color(0, 255, 255)},\n      {label:\"Blue\", value: new Color(0, 0, 255)},\n      {label:\"Magenta\", value: new Color(255, 0, 255)},\n      {label:\"Red\", value: new Color(255, 0, 0)},\n      {label:\"Black\", value: new Color(0, 0, 0)}\n    ]\n\n    this.state.title = \"Window Color\" // TODO: This needs to be localized\n    this.setting = \"windowColor\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class WindowOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"0%\", value: \"0\"},\n      {label:\"25%\", value: \".25\"},\n      {label:\"50%\", value: \".5\"},\n      {label:\"75%\", value: \".75\"},\n      {label:\"100%\", value: \"1\"}\n    ]\n\n    this.state.title = \"Window Opacity\" // TODO: This needs to be localized\n    this.setting = \"windowOpacity\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class ScrollType extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"Pop-out\", value: \"popout\"},\n      {label:\"Roll-on\", value: \"rollon\"},\n      {label:\"Paint-on\", value: \"painton\"}\n    ]\n\n    this.state.title = \"Scroll Type\" // TODO: This needs to be localized\n    this.setting = \"scroll\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class EdgeColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"White\", value: new Color(255, 255, 255)},\n      {label:\"Yellow\", value: new Color(255, 255, 0)},\n      {label:\"Green\", value: new Color(0, 128, 0)},\n      {label:\"Cyan\", value: new Color(0, 255, 255)},\n      {label:\"Blue\", value: new Color(0, 0, 255)},\n      {label:\"Magenta\", value: new Color(255, 0, 255)},\n      {label:\"Red\", value: new Color(255, 0, 0)},\n      {label:\"Black\", value: new Color(0, 0, 0)}\n    ]\n\n    this.state.title = \"Edge Color\" // TODO: This needs to be localized\n    this.setting = \"edgeColor\"\n    this.select()\n  }\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class EdgeOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label:\"25%\", value: 0.25},\n      {label:\"50%\", value: 0.5},\n      {label:\"75%\", value: 0.75},\n      {label:\"100%\", value: 1}\n    ]\n\n    this.state.title = \"Edge Opacity\" // TODO: This needs to be localized\n    this.setting = \"edgeOpacity\"\n    this.select()\n  }\n\n}\n","import Panel from \"./Panel.js\"\nimport Home from \"./captionsettings/Home\"\nimport Options from \"./captionsettings/Options\"\nimport BackgroundColor from \"./captionsettings/BackgroundColor\"\nimport BackgroundOpacity from \"./captionsettings/BackgroundOpacity\"\nimport CharacterEdgeStyle from \"./captionsettings/CharacterEdgeStyle\"\nimport FontColor from \"./captionsettings/FontColor\"\nimport FontFamily from \"./captionsettings/FontFamily\"\nimport FontOpacity from \"./captionsettings/FontOpacity\"\nimport FontSize from \"./captionsettings/FontSize\"\nimport WindowColor from \"./captionsettings/WindowColor\"\nimport WindowOpacity from \"./captionsettings/WindowOpacity\"\nimport ScrollType from \"./captionsettings/ScrollType\"\nimport EdgeColor from \"./captionsettings/EdgeColor\"\nimport EdgeOpacity from \"./captionsettings/EdgeOpacity\"\nimport Color from \"./captionsettings/Color\"\n\nexport default class CaptionSettings extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.languages = []\n    this.state.keyDown = false\n\n    const settings = Object.assign({}, this.player.settings.captions)\n    for (let key in settings) {\n      if (/Color$/.test(key)) {\n        settings[key] = new Color(settings[key])\n        settings[key.replace(\"Color\", \"Opacity\")] = settings[key].a\n      }\n    }\n    this.state.captionsettings = settings\n\n    this.state.viewChange = this.changeView.bind(this)\n    this.state.settingsChange = this.changeSettings.bind(this)\n    this.state.level = \"home\"\n  }\n\n  componentWillMount() {\n    this.open = true\n  }\n\n  focus(event) {\n    this.refs.element.firstChild.children[2].focus()\n  }\n\n  changeView(event, toState) {\n    if (/keydown/.test(event.type) && (event.keyCode == 13 || event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 39)) {\n      this.keyDown = true\n    }\n    setTimeout(() => { this.setState({level: toState}) }, 100)\n  }\n\n  changeSettings(object) {\n    for (var key in object) {\n      let setting = object[key]\n      let value = setting.value\n      switch (key) {\n        case \"language\":\n          const hidden = (setting.value == \"off\")\n          if (!hidden)\n            this.player.captioning.selectTrackByLanguage(setting.value)\n          this.player.captioning.hidden = hidden\n        break\n\n        case \"backgroundColor\":\n        case \"windowColor\":\n        case \"fontColor\":\n        case \"edgeColor\":\n          value.a = this.state.captionsettings[key].a\n        break\n\n        case \"backgroundOpacity\":\n        case \"fontOpacity\":\n        case \"windowOpacity\":\n        case \"edgeOpacity\":\n          key = key.replace(\"Opacity\", \"Color\")\n          let color = this.state.captionsettings[key]\n          color.a = value\n          value = color\n        break\n\n      }\n      this.state.captionsettings[key] = value\n      this.state.captionsettings[`${key}Label`] = value.label\n    }\n\n    let settings = Object.assign({}, this.state.captionsettings)\n    for (let key in settings) {\n      if (/Label$/.test(key)) {\n        delete settings[key]\n      }\n      else if (/Color$/.test(key)) {\n        settings[key] = settings[key].toString()\n      }\n    }\n    settings.visible = !this.player.captioning.hidden\n    this.player.captioning.changeSettings(settings)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.keyDown) {\n      this.refs.element.firstChild.children[1].focus()\n      this.keyDown = false\n    }\n  }\n\n  getCurrentPage() {\n\n    switch (this.state.level) {\n      case \"home\":\n        return <Home {...this.state} gotoSettings={this.props.gotoSettings.bind(this)}/>\n        break\n      case \"options\":\n        return <Options {...this.state}/>\n        break\n      case \"fontFamily\":\n        return <FontFamily {...this.state}/>\n        break\n      case \"fontColor\":\n        return <FontColor {...this.state}/>\n        break\n      case \"size\":\n        return <FontSize {...this.state}/>\n        break\n      case \"fontOpacity\":\n        return <FontOpacity {...this.state}/>\n        break\n      case \"backgroundColor\":\n        return <BackgroundColor {...this.state}/>\n        break\n      case \"backgroundOpacity\":\n        return <BackgroundOpacity {...this.state}/>\n        break\n      case \"windowColor\":\n        return <WindowColor {...this.state}/>\n        break\n      case \"windowOpacity\":\n        return <WindowOpacity {...this.state}/>\n        break\n      case \"edgeType\":\n        return <CharacterEdgeStyle {...this.state}/>\n        break\n      case \"edgeColor\":\n        return <EdgeColor {...this.state}/>\n        break\n      case \"edgeOpacity\":\n        return <EdgeOpacity {...this.state}/>\n        break\n      case \"scroll\":\n        return <ScrollType {...this.state}/>\n    }\n  }\n\n  render() {\n    const localization = this.player.localization\n    return <div ref=\"element\" role=\"menu\">{this.getCurrentPage()}</div>\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class Quality extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      { label: \"Auto\", value: \"0.25\" } // TODO: Auto needs to be localized\n    ]\n    this.qualityLevels = []\n    this.state.title = \"Quality\" // TODO: This needs to be localized\n    this.state.activeIndex = -1\n  }\n\n  componentWillMount() {\n    super.componentWillMount()\n    this.onqualitylevelsloaded({detail: this.player.qualityLevels})\n    this.onqualitychanging({detail: this.player.qualityLevels[this.player.quality]})\n    this.open = true\n  }\n\n  clickHandler(object, index) {\n    this.player.quality = index - 1\n    if (!index)\n      this.onqualitychanging()\n  }\n\n  onqualitylevelsloaded(event) {\n    this.qualityLevels = event.detail\n    this.qualityLevels.forEach((item) => {\n      this.listOptions.push({\"label\": `${Math.round(item.bitrate / 1000)} Kbps`})\n    })\n    this.setState({redraw: true})\n  }\n\n  onqualitychanging(event) {\n    let index = -1, autoLevel = false\n    try {\n      autoLevel = this.player.qualityMode\n      index = autoLevel == \"auto\" ? -1 : (event.detail ? this.qualityLevels.findIndex(levelObject => levelObject.qualityIndex == event.detail.qualityIndex && levelObject.level == event.detail.level) : this.props.quality.quality)\n    } catch (e) {}\n\n    this.setState({activeIndex: index})\n  }\n\n  isOptionSelected(item, index) {\n    return (index - 1 === this.state.activeIndex)\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class PlaybackRate extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.title = \"Speed\" // TODO: This needs to be localized\n    this.listOptions = [\n      { label: \"0.25\", value: 0.25 },\n      { label: \".5\", value: 0.5 },\n      { label: \"Normal\", value: 1 },\n      { label: \"1.25\", value: 1.25 },\n      { label: \"1.5\", value: 1.5 },\n      { label: \"2\", value: 2 }\n    ]\n\n    this.state.activeIndex = 2\n    this.listOptions.forEach((option, index) => {\n      if (option.value == this.player.playbackRate) {\n        this.state.activeIndex = index\n      }\n    })\n    this.classList.add(\"amp-playback-rate\")\n  }\n\n  clickHandler(object, index) {\n    this.player.playbackRate = object.value\n    super.clickHandler(object, index)\n  }\n\n  isOptionSelected(item, index) {\n    return (parseFloat(item.value) === parseFloat(this.player.playbackRate))\n  }\n}\n","import PanelMenu from \"./PanelMenu.js\"\nimport CaptionSettings from \"./CaptionSettings.js\"\nimport Quality from \"./Quality.js\"\nimport PlaybackRate from \"./PlaybackRate.js\"\nimport ListItem from \"./ListItem.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class SettingsPanel extends PanelMenu {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.settingsLevel = 0\n    this.state.bitrateLabel = \"Auto\"\n    this.state.captioningSettingState = null\n  }\n\n  toggle() {\n    super.toggle()\n    this.state.settingsLevel = 0\n  }\n\n  onqualitychanging(event) {\n    let brLabel = this.player.qualityMode === \"auto\" ? \"Auto\" : (Math.round(event.detail.bitrate / 1000) + \"Kbps\") // TODO: Needs to be localized\n    this.state.quality = this.state.qualityLevels ? this.state.qualityLevels.findIndex(levelObject => levelObject.qualityIndex == event.detail.qualityIndex && levelObject.level == event.detail.level) : -1\n    this.setState({bitrateLabel: brLabel})\n  }\n\n  changeState(value, event) {\n    if (event.type == \"keydown\" && (event.keyCode == 13 || event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40) && this.mouseFocus != true) {\n      if (event.keyCode == 37 && this.state.settingsLevel == 0)\n        return\n      this.state.keyDown = true\n    }\n    setTimeout(() => { this.setState({settingsLevel:value});}, 100)\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if(nextState.settingsLevel == 1 && this.refs.firstElem.state.captionsettings)\n      this.setState({'captioningSettingState': this.refs.firstElem.state.captionsettings})\n    else if (nextState.settingsLevel === 3 && (this.refs.firstElem != null) && !isNaN(this.refs.firstElem.state.activeIndex))\n      this.setState({'playbackSettingState': this.refs.firstElem.state.activeIndex})\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.keyDown) {\n      if (typeof this.refs.firstElem.focus === \"function\") {\n        this.refs.firstElem.focus()\n      }\n      else {\n        this.refs.firstElem.refs.element.childNodes[1].focus()\n      }\n      this.state.keyDown = false\n    }\n  }\n\n  render() {\n    switch (this.state.settingsLevel) {\n      case 0:\n        const isCaptionEnabled = Utils.componentEnabled(this.plugin, \"captioning\")\n        const isQualityEnabled = this.player.qualityLevels != null && this.player.qualityLevels.length > 0\n        let qualityRef, playbackRef\n        if (!isCaptionEnabled && isQualityEnabled)\n          qualityRef = \"firstElem\"\n        else if (!isCaptionEnabled && !isQualityEnabled)\n          playbackRef = \"firstElem\"\n\n        return (<div ref=\"element\" {...this.propsList} className={`amp-settings amp-panel ${this.className}`} role=\"menu\">\n                { isCaptionEnabled &&\n                  <ListItem ref=\"firstElem\" className=\"amp-subtitles\" onClick={this.changeState.bind(this, 1)} direction=\"right\">\n                    <span className=\"amp-label\">Subtitles</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.player.captioning.hidden ? \"Off\": this.player.localization.getLanguageString(this.player.captioning.track.language)}</span>\n                  </ListItem>\n                }\n                { isQualityEnabled &&\n                  <ListItem ref={qualityRef} onClick={this.changeState.bind(this, 2)} direction=\"right\">\n                    <span className=\"amp-label\">Quality</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.state.bitrateLabel}</span>\n                  </ListItem>\n                }\n                { this.player.mode != \"flash\" &&\n                  <ListItem ref={playbackRef} className=\"amp-playback-rate-button\" onClick={this.changeState.bind(this, 3)} direction=\"right\">\n                    <span className=\"amp-label\">Speed</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.player.playbackRate === 1 ? 'Normal' : this.player.playbackRate}</span>\n                  </ListItem>\n                }\n               </div>)\n        break\n      case 1:\n        return (<div ref=\"element\" className={`amp-captioning-settings amp-panel ${this.className}`}>\n                  <CaptionSettings ref=\"firstElem\" captionState={this.state.captioningSettingState} gotoSettings={this.changeState.bind(this,0)}/>\n                </div>)\n        break\n      case 2:\n        return (<div ref=\"element\" className={`amp-bitrate amp-panel ${this.className}`}>\n                  <Quality ref=\"firstElem\" gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break\n      case 3:\n        return (<div ref=\"element\" className={`amp-playback-rate amp-panel ${this.className}`}>\n                  <PlaybackRate ref=\"firstElem\" gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break\n    }\n\n  }\n}\n","import PanelControl from \"./PanelControl.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class ShareButton extends PanelControl {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-share\", true)\n    this.state.altText = \"MSG_SHARE\"\n  }\n}\n","import PanelMenu from \"./PanelMenu.js\"\nimport ListItem from \"./ListItem.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class SharePanel extends PanelMenu {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n       {label:\"Facebook\", id: \"facebook\", url: \"www.facebook.html\"},\n       {label:\"Twitter\", id: \"twitter\", url: \"www.twitter.com\"},\n       {label:\"Email\", id: \"email\", url: \"\"},\n       {label:\"Embed\", id: \"embed\", url: \"\"}\n     ]\n  }\n\n  clickHandler(object, index, event) {\n    this.player.dispatchEvent(new akamai.amp.Event(\"share\", object))\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.keyDown) {\n      this.refs.element.childNodes[0].focus()\n      this.state.keyDown = false\n    }\n  }\n\n  render() {\n    var OptionsList = this.listOptions.map((object,index) => {\n      return <ListItem key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={`amp-icon amp-${object.id}`} tabIndex=\"-1\"></button>\n              <span>{object.label}</span>\n             </ListItem>\n    });\n\n    return <div ref=\"element\" className={`amp-share amp-panel ${this.className}`}>\n            {OptionsList}\n           </div>\n  }\n}\n","import Toggle from \"./Toggle.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class CaptionToggleButton extends Toggle {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-cc\")\n    this.state.altText = \"MSG_CLOSED_CAPTIONING\"\n    this.state.toggled = this.player.captioning ? !this.player.captioning.hidden : false\n  }\n\n  onmediachange() {\n    setTimeout(this.forceUpdate.bind(this), 1)\n  }\n\n  onChange(event) {\n    this.player.captioning.hidden = !this.player.captioning.hidden\n  }\n\n  render() {\n    if (!Utils.componentEnabled(this.plugin, \"captioning\"))\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class JumpBack extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-jump-back\", true)\n    this.state.altText = \"MSG_JUMP_BACK\"\n  }\n\n  onClick() {\n    const player = this.player\n    this.player.currentTime = Math.max(this.player.currentTime - 10, 0)\n  }\n\n}\n","import Control from \"./Control.js\"\n\nexport default class JumpForward extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-jump-forward\", true)\n    this.state.altText = \"MSG_JUMP_AHEAD\"\n  }\n\n  onClick(event) {\n    if (!this.player.getEnded()) {\n      this.player.currentTime = Math.min(this.player.currentTime + 10, this.player.duration - 1)\n    }\n  }\n\n}\n","import Component from \"./Component.js\"\n\nexport default class Poster extends Component {\n\n  onmediachange(event) {\n    this.setState({src: this.player.media.poster})\n  }\n\n  render() {\n    return (\n      <img className=\"amp-poster\" src={this.state.src} />\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Title extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-title\", true)\n  }\n\n  onmediachange(event) {\n    this.setState({textContent: this.player.media.title})\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class ErrorMsg extends Component {\n\n  onerror(event) {\n    this.setState({error: this.l10n.MSG_ERROR_DEFAULT})\n  }\n\n  render() {\n    return (\n      <div className=\"amp-error-msg\">\n        <div dangerouslySetInnerHTML={{__html: this.state.error}} />\n      </div>\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class ContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  render() {\n    const menuItems = [\n      <li className=\"amp-context-item amp-bold\" key=\"0\">Akamai Adaptive Media Player</li>,\n      <li className=\"amp-context-item\" key=\"1\">{this.player.version}</li>\n    ]\n\n    if ((typeof akamaiGetViewerId == \"function\") && (akamaiGetViewerId() != null))\n      menuItems.push(<li className=\"amp-context-item amp-selectable\" key=\"2\">Viewer ID: {akamaiGetViewerId()}</li>)\n\n    const style = {\n      top: `${this.props.y}px`,\n      left: `${this.props.x}px`\n    }\n\n    return (\n      <ul ref=\"element\" className=\"amp-context-menu\" style={style}>\n        {menuItems}\n      </ul>\n    )\n  }\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Ads extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-ads\", true)\n    this.state.msg = \"\"\n    this.state.time = \"\"\n    this.bindHandlers([\"onadbreakstart\", \"onadbreakend\", \"onadstarted\", \"onadtimeremaining\"])\n  }\n\n  get container() {\n    return this.refs.container\n  }\n\n  onready() {\n    const ads = this.player.ads\n    if (ads == null)\n      return\n    ads.addEventListener(\"breakstart\", this.onadbreakstart)\n    ads.addEventListener(\"breakend\", this.onadbreakend)\n    ads.addEventListener(\"started\", this.onadstarted)\n    ads.addEventListener(\"timeremaining\", this.onadtimeremaining)\n  }\n\n  onmediachange() {\n    this.onadbreakend()\n  }\n\n  onadbreakstart(event) {\n    const adVO = event.detail\n    this.setState({msg: \"\", time: \"\"})\n  }\n\n  onadbreakend(event) {\n    this.setState({msg: \"\", time: \"\"})\n    this.plugin.container.classList.update({\"amp-ad-break\": false})\n    this.player.container.classList.remove(\"amp-ad-break\")\n  }\n\n  onadstarted(event) {\n    this.plugin.container.classList.update({\"amp-ad-break\": true})\n    this.player.container.classList.add(\"amp-ad-break\")\n\n    const adVO = event.detail\n    this.setState({time: adVO.duration, msg: `${this.getLocalizedString(\"MSG_AD\")} ${adVO.position} ${this.getLocalizedString(\"MSG_OF\")} ${adVO.totalAds}`})\n  }\n\n  onadtimeremaining(event) {\n    this.setState({time: event.detail})\n  }\n\n  render() {\n    if (this.player.ads == null)\n      return null\n\n    const time = (this.state.time != \"\") ? Utils.formatTimecode(Math.ceil(this.state.time)) : this.state.time\n\n    return (\n      <div className=\"amp-ads\">\n        <div ref=\"container\" className=\"amp-ad-container\" />\n        <div className=\"amp-bar amp-ad-info\">\n          <div ref=\"count\" className=\"amp-ad-component amp-ad-count\">{this.state.msg}</div>\n          <div ref=\"spacerLeft\" className=\"amp-spacer\" />\n          <div ref=\"spacerRight\" className=\"amp-spacer\" />\n          <div ref=\"time\" className=\"amp-ad-component amp-ad-time\">{time}</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Airplay extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.available = false\n    this.state.playing = false\n    this.classList.add(\"amp-airplay\", true)\n  }\n\n  get isAvailable() {\n    return (window.WebKitPlaybackTargetAvailabilityEvent != null)\n  }\n\n  get available() {\n    return (this.isAvailable && this.state.available)\n  }\n\n  set playing(value) {\n    this.state.playing = value\n    this.plugin.container.classList.update({\"amp-playback-target-airplay\": value})\n  }\n\n  get playing() {\n    return this.state.playing\n  }\n\n  onready(event) {\n    if (this.isAvailable === false)\n      return\n\n    const video = this.player.mediaElement\n    video.setAttribute(\"x-webkit-airplay\", \"allow\")\n    video.addEventListener(\"webkitplaybacktargetavailabilitychanged\", (event) => {\n      this.state.available = (event.availability == \"available\")\n      this.playing = video.webkitCurrentPlaybackTargetIsWireless\n      this.forceUpdate()\n    })\n    window.addEventListener(\"webkitcurrentplaybacktargetiswireless\", (event) => {\n      this.playing = video.webkitCurrentPlaybackTargetIsWireless\n    })\n  }\n\n  onClick() {\n    this.player.mediaElement.webkitShowPlaybackTargetPicker()\n  }\n\n  render() {\n    if (this.available === false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PiP extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-pip\", true)\n  }\n\n  get available() {\n    const mediaElement = this.player.mediaElement\n    if (mediaElement == null || typeof mediaElement.webkitSupportsPresentationMode != \"function\" || typeof mediaElement.webkitSetPresentationMode != \"function\")\n      return false\n    else\n      return mediaElement.webkitSupportsPresentationMode(\"picture-in-picture\")\n  }\n\n  onClick(event) {\n    this.mediaElement.webkitSetPresentationMode(this.mediaElement.webkitPresentationMode === \"picture-in-picture\" ? \"inline\" : \"picture-in-picture\");\n  }\n\n  render() {\n    if (!this.available)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class ChromeCast extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.available = false\n    this.classList.add(\"amp-chromecast\", true)\n  }\n\n  onready() {\n    if (!Utils.componentEnabled(this.plugin, \"chromecast\"))\n      return\n\n    this.setState({available: this.player.chromecast.isReceiverAvailable()})\n  }\n\n  get available() {\n    return this.state.available\n  }\n\n  onClick() {\n    this.player.chromecast.launch()\n  }\n\n  render() {\n    if (this.available === false)\n      return null\n\n    return super.render()\n  }\n}\n","import Component from \"./Component.js\"\nimport Container from \"./Container.js\"\nimport PanelControl from \"./PanelControl.js\"\nimport PlayPause from \"./PlayPause.js\"\nimport PauseOverlay from \"./PauseOverlay.js\"\nimport BufferingOverlay from \"./BufferingOverlay.js\"\nimport CurrentTime from \"./CurrentTime.js\"\nimport Live from \"./Live.js\"\nimport Duration from \"./Duration.js\"\nimport Progress from \"./Progress.js\"\nimport Volume from \"./Volume.js\"\nimport Mute from \"./Mute.js\"\nimport Fullscreen from \"./Fullscreen.js\"\nimport SettingsButton from \"./SettingsButton.js\"\nimport SettingsPanel from \"./SettingsPanel.js\"\nimport ShareButton from \"./ShareButton.js\"\nimport SharePanel from \"./SharePanel.js\"\nimport CaptionToggleButton from \"./CaptionToggleButton.js\"\nimport JumpBack from \"./JumpBack.js\"\nimport JumpForward from \"./JumpForward.js\"\nimport Poster from \"./Poster.js\"\nimport Title from \"./Title.js\"\nimport ErrorMsg from \"./ErrorMsg.js\"\nimport Utils from \"./Utils.js\"\nimport ContextMenu from \"./ContextMenu.js\"\nimport Ads from \"./Ads.js\"\nimport Airplay from \"./Airplay.js\"\nimport PiP from \"./PiP.js\"\nimport ChromeCast from \"./ChromeCast.js\"\n\nexport default class UI extends Component {\n\n  constructor(props) {\n    super(props)\n    this.feature = \"ui\"\n    this.state.playState = \"ready\"\n    this.state.open = false\n    this.state.dragging = false\n    this.isTouchDevice = akamai.amp.Utils.isTouch\n    this.contextMenuClick = this.contextMenuClick.bind(this)\n    this.autoHide = (this.config.autoHide != null) ? this.config.autoHide : 3\n    this.timeout = null\n\n    this.bindHandlers([\"onMouseEnter\", \"onMouseLeave\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onContextMenu\", \"onClick\"])\n  }\n\n  getChildContext() {\n    return {\n      player: this.props.player,\n      config: this.props.player,\n      plugin: this\n    }\n  }\n\n  get debug() {\n    return (this.config.debug != null) ? this.config.debug : this.player.config.debug\n  }\n\n  get container() {\n    return this.refs.container\n  }\n\n  get ads() {\n    return this.refs.ads\n  }\n\n  get components() {\n    return this.refs\n  }\n\n  get controls() {\n    return this.refs.controls\n  }\n\n  get mode() {\n    return this.state.mode\n  }\n\n  set mode(value) {\n    const mode = this.state.mode\n    this.container.classList.update({\n      [`amp-controls-${mode}`]: false,\n      [`amp-controls-${value}`]: true\n    })\n    this.setState({mode: value})\n\n    // TODO: Remove these when controls plugin is completely removed from amp-web\n    this.player.container.classList.remove(`amp-controls-${mode}`)\n    this.player.container.classList.add(`amp-controls-${value}`)\n  }\n\n  get dragging() {\n    return this.state.dragging\n  }\n\n  set dragging(value) {\n    if (value == true) {\n      this.stopActiveTimeout()\n    }\n    else {\n      this.startActiveTimeout()\n    }\n    this.container.classList.update({[`amp-dragging`]: value})\n    this.setState({dragging: value})\n  }\n\n  get open() {\n    return this.state.open\n  }\n\n  set open(value) {\n    this.container.classList.update({[`amp-open`]: value})\n    this.setState({open: value})\n  }\n\n  onready(event) {\n    if (this.config.mode != null)\n      this.mode = this.config.mode\n\n    this.container.classList.update({\n      \"amp-cc-active\": this.player.captioning && !this.player.captioning.hidden,\n      \"amp-touch\": this.isTouchDevice\n    })\n\n    if (this.player.captioning != null) {\n      this.player.captioning.addEventListener(\"visibilitychange\", this.onvisibilitychange.bind(this))\n    }\n\n    this.player.container.addEventListener(\"mouseenter\", this.onMouseEnter)\n    this.player.container.addEventListener(\"mouseleave\", this.onMouseLeave)\n\n    // Workaround for UI flicker and FOUT\n    setTimeout(() => {\n      this.container.element.style.display = \"block\"\n    }, 10)\n  }\n\n  onvisibilitychange(event) {\n    this.container.classList.update({\"amp-cc-active\": event.detail})\n  }\n\n  onmediachange(event) {\n    const media = this.player.media\n    this.container.classList.update({\"amp-text-tracks\": media.tracks && media.tracks.length})\n  }\n\n  onfullscreenchange(event) {\n    this.container.classList.update({\"amp-full-screen\": event.detail})\n  }\n\n  onplaystatechange(event) {\n    const updates = {\n      [`amp-waiting`]: false,\n      [`amp-${event.detail.previous}`]: false,\n      [`amp-${event.detail.value}`]: true\n    }\n    this.container.classList.update(updates)\n  }\n\n  onplaying(event) {\n    this.container.classList.update({\"amp-waiting\": false})\n\n    if (!this.isTouchDevice)\n      return\n\n    this.startActiveTimeout()\n  }\n\n  onwaiting(event) {\n    this.container.classList.update({\"amp-waiting\": true})\n    this.player.once(\"timeupdate\", () => {\n      this.container.classList.update({\"amp-waiting\": false})\n    })\n  }\n\n  onseeking(event) {\n    this.container.classList.update({\"amp-waiting\": true})\n  }\n\n  onseeked(event) {\n    this.container.classList.update({\"amp-waiting\": false})\n  }\n\n  onerror(event) {\n    this.container.classList.update({\"amp-error\": true})\n  }\n\n  onislive(event) {\n    this.container.classList.update({\"amp-is-live\": event.detail})\n  }\n\n  ontemporaltypechange(event) {\n    const updates = {\n      [`amp-${event.detail.previous}`]: false,\n      [`amp-${event.detail.value}`]: true\n    }\n    this.container.classList.update(updates)\n  }\n\n  togglePlayPause() {\n    if (this.player.playState == \"ready\" || this.player.paused) {\n      this.player.play()\n    } else {\n      this.player.pause()\n    }\n  }\n\n  set activeState(value) {\n    const active = (value == \"active\")\n    const inactive = (value == \"inactive\")\n    this.container.classList.update({\"amp-active\": active, \"amp-inactive\": inactive})\n\n    // TODO: Remove these when controls plugin is completely removed from amp-web\n    let action = active ? \"add\" : \"remove\"\n    this.player.container.classList[action](\"amp-active\")\n\n    action = inactive ? \"add\" : \"remove\"\n    this.player.container.classList[action](\"amp-inactive\")\n  }\n\n  get activeState() {\n    switch (true) {\n      case this.container.classList.contains(\"amp-active\"):\n        return \"active\"\n\n      case this.container.classList.contains(\"amp-inactive\"):\n        return \"inactive\"\n\n      default:\n        return \"none\"\n    }\n  }\n\n  startActiveTimeout() {\n    this.stopActiveTimeout()\n    this.timeout = setTimeout(() => {\n      this.activeState = \"none\"\n    }, this.autoHide * 1000)\n  }\n\n  stopActiveTimeout() {\n    clearTimeout(this.timeout)\n  }\n\n  onMouseEnter(event) {\n    this.stopActiveTimeout()\n    this.activeState = \"active\"\n  }\n\n  onMouseLeave(event) {\n    const element = document.elementFromPoint(event.clientX, event.clientY)\n    if (this.player.playState == \"ready\" || this.open || this.player.container.contains(element))\n      return\n\n    if (this.dragging) {\n      const handler = () => {\n        window.removeEventListener(\"mouseup\", handler)\n        if (!akamai.amp.Utils.isMouseOverElement(this.container.element))\n          this.onMouseLeave(event)\n      }\n      window.addEventListener(\"mouseup\", handler)\n      return\n    }\n\n    this.activeState = \"inactive\"\n    this.startActiveTimeout()\n  }\n\n  onClick() {\n    if (this.isTouchDevice) {\n      if (this.activeState == \"active\") {\n        this.activeState = \"none\"\n      }\n      else {\n        this.activeState = \"active\"\n        this.startActiveTimeout()\n      }\n    }\n    else {\n      this.togglePlayPause()\n    }\n  }\n\n  isFocused(element) {\n    const container = this.container.element\n    return (element == container || container.contains(element))\n  }\n\n  onFocus(event) {\n    const focused = this.isFocused(event.target)\n    this.focused = (event.target.nodeName != \"BUTTON\" && focused)\n    if (focused)\n      this.container.classList.add(\"amp-active\")\n  }\n\n  onBlur(event) {\n    const focused = this.isFocused(event.target)\n    this.focused = (event.target.nodeName != \"BUTTON\" && focused)\n    if (!focused)\n      this.onMouseLeave(event)\n  }\n\n  onKeyDown(event) {\n    switch (event.keyCode) {\n      case 77: // M\n        this.player.muted = !this.player.muted\n      break;\n\n      case 67: // C\n          this.player.captioning.hidden = !this.player.captioning.hidden\n      break;\n\n      case 70: // F\n        this.player.displayState == this.player.displayState == 'full-screen'? this.player.exitFullScreen() : this.player.enterFullScreen()\n      break;\n    }\n\n    if (this.focused == false)\n      return\n\n    switch (event.keyCode) {\n      case 13: // Enter\n      case 32: // Space\n        this.togglePlayPause()\n      break;\n\n      case 39: // Left\n      case 37: // Right\n        if (this.refs.volume.focused === false)\n          this.refs.progress.onKeyDown(event)\n      break;\n\n      case 38: // Up\n      case 40: // Down\n        if (this.refs.progress.focused === false)\n          this.refs.volume.onKeyDown(event)\n      break;\n    }\n  }\n\n  contextMenuClick(event) {\n    if (/selectable/.test(event.target.className))\n      return false\n    this.removeContextMenu(event)\n    return false\n  }\n\n  removeContextMenu(event) {\n    document.body.removeEventListener(\"click\", this.contextMenuClick)\n    const parent = document.body\n    parent.removeChild(this.contextMenu)\n    this.contextMenu = null\n  }\n\n  onContextMenu(event) {\n    if (this.debug === true)\n      return\n\n    event.preventDefault()\n\n    const parent = document.body\n    const contextMenu = (\n      <ContextMenu player={this.player} x={event.pageX} y={event.pageY} />\n    )\n\n    if (this.contextMenu != null)\n      this.removeContextMenu()\n\n    this.contextMenu = document.createElement(\"div\")\n    parent.appendChild(this.contextMenu)\n    document.body.addEventListener(\"click\", this.contextMenuClick)\n    ReactDOM.render(contextMenu, this.contextMenu)\n  }\n\n  replay() {\n    this.player.replay()\n    setTimeout(this.player.play.bind(this.player), 150)\n  }\n\n  render() {\n    return (\n      <Container ref=\"container\"\n          tabIndex=\"0\"\n          style={{display: \"none\"}}\n          classList={[\"amp-react\", \"amp-ui\", \"amp-ready\", \"amp-active\"]}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          onKeyDown={this.onKeyDown}\n          onContextMenu={this.onContextMenu}\n          >\n        <div className=\"amp-interactive\" onClick={this.onClick} />\n        <Poster ref=\"poster\" />\n        <Title ref=\"title\" />\n        <Ads ref=\"ads\" />\n        <PauseOverlay ref=\"pauseOverlay\" />\n        <BufferingOverlay ref=\"bufferingOverlay\" />\n        <Progress ref=\"progress\" />\n        <Container ref=\"controls\" className=\"amp-controls amp-bar\">\n          <PlayPause ref=\"playpause\" />\n          <JumpBack ref=\"jumpback\"/>\n          <JumpForward ref=\"jumpforward\"/>\n          <div ref=\"timeDisplay\" className=\"amp-time-display\">\n             <CurrentTime ref=\"currentTime\" />\n             <span ref=\"timeSeparator\" className=\"amp-time-separator\" />\n             <Duration ref=\"duration\" />\n             <Live ref=\"live\" />\n          </div>\n          <Mute ref=\"mute\" />\n          <Volume ref=\"volume\" />\n          <div ref=\"spacerLeft\" className=\"amp-spacer\" />\n          <div ref=\"spacerRight\" className=\"amp-spacer\" />\n          <ShareButton ref=\"share\" panel=\"sharePanel\" />\n          <CaptionToggleButton ref=\"cc\" />\n          <SettingsButton ref=\"settings\" panel=\"settingsPanel\" />\n          <PiP ref=\"pip\" />\n          <Airplay ref=\"airplay\" />\n          <ChromeCast ref=\"chromecast\" />\n          <Fullscreen ref=\"fullscreen\" />\n        </Container>\n        <SharePanel ref=\"sharePanel\" />\n        <SettingsPanel ref=\"settingsPanel\" />\n        <ErrorMsg ref=\"error\" />\n        {this.state.contextMenu}\n      </Container>\n    )\n  }\n\n  destroy() {\n    ReactDOM.unmountComponentAtNode(this._container)\n  }\n\n  static get childContextTypes() {\n    return {\n      player: PropTypes.object,\n      config: PropTypes.object,\n      plugin: PropTypes.object\n    }\n  }\n\n  static create(player, config) {\n    if (config.native === true) {\n      const ui = {config}\n      player.once(\"ready\", () => player.mediaElement.controls = true)\n      if (player.ads != null) {\n        ui.ads = {\n          container: document.createElement(\"div\")\n        }\n        player.container.appendChild(ui.ads.container)\n      }\n      return Promise.resolve(ui)\n    }\n\n    return new Promise((resolve, reject) => {\n      player.once(\"ready\", () => {\n        if (player.mediaElement.setPlayerProperty != null)\n          player.mediaElement.setPlayerProperty(\"controlsMode\", \"none\")\n      })\n      resolve(\n        ReactDOM.render(<UI player={player} config={config} />, player.container)\n      )\n    })\n  }\n}\n","import \"./main.less\"\nimport UI from \"./UI.js\"\n\nakamai.amp.AMP.registerPlugin(\"react\", UI.create)\n\nexport {default as Component} from \"./Component.js\"\nexport {default as Container} from \"./Container.js\"\nexport {default as ClassList} from \"./ClassList.js\"\nexport {default as Panel} from \"./Panel.js\"\nexport {default as PanelMenu} from \"./PanelMenu.js\"\nexport {default as PanelControl} from \"./PanelControl.js\"\nexport {default as ListItem} from \"./ListItem.js\"\n\nexport {UI}\n"]}